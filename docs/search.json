[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/statlingua.html","id":"example-inappropriate-use-of-two-sample-t-test","dir":"Articles","previous_headings":"","what":"Example: inappropriate use of two-sample t-test","title":"statlingua","text":"following example taken tutorial paired t-tests. use independent two-sample t-test (inappropriately) analyze paired data. Next, initialize call explain() method explain output statistical test. Okay, ’s breakdown Welch Two Sample t-test output, along explanations context:","code":"context <- \" An instructor wants to use two exams in her classes next year. This year, she gives both exams to the students. She wants to know if the exams are equally difficult and wants to check this by comparing the two sets of scores. Here is the data:   student exam_1_score exam_2_score      Bob           63           69     Nina           65           65      Tim           56           62     Kate          100           91   Alonzo           88           78     Jose           83           87   Nikhil           77           79    Julia           92           88    Tohru           90           85  Michael           84           92     Jean           68           69    Indra           74           81    Susan           87           84    Allen           64           75     Paul           71           84   Edwina           88           82 \"  # Create the data set exam_scores <- tibble::tribble(   ~student,  ~exam_1_score, ~exam_2_score,   \"Bob\",     63,            69,   \"Nina\",    65,            65,   \"Tim\",     56,            62,   \"Kate\",    100,           91,   \"Alonzo\",  88,            78,   \"Jose\",    83,            87,   \"Nikhil\",  77,            79,   \"Julia\",   92,            88,   \"Tohru\",   90,            85,   \"Michael\", 84,            92,   \"Jean\",    68,            69,   \"Indra\",   74,            81,   \"Susan\",   87,            84,   \"Allen\",   64,            75,   \"Paul\",    71,            84,   \"Edwina\",  88,            82 )  # Run a two-sample t-test (tt <- t.test(exam_scores$exam_1_score, y = exam_scores$exam_2_score)) #>  #>  Welch Two Sample t-test #>  #> data:  exam_scores$exam_1_score and exam_scores$exam_2_score #> t = -0.33602, df = 27.307, p-value = 0.7394 #> alternative hypothesis: true difference in means is not equal to 0 #> 95 percent confidence interval: #>  -9.322782  6.697782 #> sample estimates: #> mean of x mean of y  #>   78.1250   79.4375 # Explain the output chat <- ellmer::chat_gemini(echo = \"none\") #> Using model = \"gemini-2.0-flash\". ex <- explain(tt, chat = chat, context = context)  cat(ex)"},{"path":"/articles/statlingua.html","id":"summary-of-the-statistical-test","dir":"Articles","previous_headings":"Example: inappropriate use of two-sample t-test","what":"1. Summary of the Statistical Test","title":"statlingua","text":"Name: Welch Two Sample t-test (also known independent samples t-test unequal variances). Purpose: test used compare means two independent groups. case, ’re comparing mean score exam_1_score mean score exam_2_score. Welch’s t-test, test assume variances two groups equal. data group approximately normally distributed. two groups (exam_1_score exam_2_score) independent .","code":""},{"path":"/articles/statlingua.html","id":"appropriateness-of-the-statistical-test","dir":"Articles","previous_headings":"Example: inappropriate use of two-sample t-test","what":"2. Appropriateness of the Statistical Test","title":"statlingua","text":"Based context, Welch Two Sample t-test appears reasonable choice. instructor wants compare difficulty two exams comparing scores achieved students exam. scores two exams represent two independent groups (assuming student took exams, data seem indicate). Welch t-test appropriate assume equal variances two exam scores, good choice considering exams might differing score distributions.","code":""},{"path":"/articles/statlingua.html","id":"suggestions-for-checking-assumptions-of-the-statistical-test","dir":"Articles","previous_headings":"Example: inappropriate use of two-sample t-test","what":"3. Suggestions for Checking Assumptions of the Statistical Test","title":"statlingua","text":"Histograms: Create histograms exam_1_score exam_2_score separately. Look approximate bell shapes. Significant departures normality (skewness, multiple peaks) concern. Q-Q Plots: Create quantile-quantile (Q-Q) plots exam score. plot quantiles sample data quantiles theoretical normal distribution. data approximately normal, points fall close straight diagonal line. Deviations line indicate departures normality. Shapiro-Wilk Test: use shapiro.test() function R formally test normality group. However, cautious interpreting results, especially small sample sizes, test can overly sensitive. Use graphical methods combination test complete picture. Independence: assumption relies study design. Since student took exams, independence assumption likely met. Equality Variances: Welch t-test used assumption equal variances violated. assess whether variances significantly different, can use graphical methods, Levene’s test F-test. Since Welch’s t-test performed, likely assumption equal variances tenable.","code":""},{"path":"/articles/statlingua.html","id":"interpretation-of-the-output","dir":"Articles","previous_headings":"Example: inappropriate use of two-sample t-test","what":"4. Interpretation of the Output","title":"statlingua","text":"t = -0.33602: calculated t-statistic. represents difference sample means, scaled standard error difference. value zero (either positive negative direction), stronger evidence null hypothesis. df = 27.307: represents degrees freedom test. Welch t-test assume equal variances, degrees freedom calculated using complex formula results fractional degrees freedom. p-value = 0.7394: p-value associated t-statistic. represents probability observing t-statistic extreme , extreme , one calculated (-0.33602), assuming true difference means two exam scores (.e., assuming null hypothesis true). large p-value suggests observed data reasonably likely occur even null hypothesis true. alternative hypothesis: true difference means equal 0: states alternative hypothesis tested. case, instructor testing whether means two exam scores different. one-sided test conducted instructor priori reasons believe certain exam higher mean score . 95 percent confidence interval: -9.322782 6.697782: 95% confidence interval difference means two exam scores (exam 1 - exam 2). suggests can 95% confident true difference means lies -9.32 6.70. Note interval includes zero, consistent high p-value. Since confidence interval includes 0, reject null hypothesis true mean difference 0. sample estimates: mean x = 78.1250, mean y = 79.4375: sample means exam_1_score (x) exam_2_score (y) respectively. mean score exam 1 78.125, mean score exam 2 79.4375.","code":""},{"path":"/articles/statlingua.html","id":"overall-conclusion","dir":"Articles","previous_headings":"Example: inappropriate use of two-sample t-test","what":"5. Overall conclusion","title":"statlingua","text":"Based Welch Two Sample t-test output, p-value 0.7394, insufficient evidence reject null hypothesis significance level α=0.05\\alpha = 0.05. conclude statistically significant difference mean scores exam_1_score exam_2_score. words, based analysis, don’t enough evidence say exams different difficulty.","code":""},{"path":"/articles/statlingua.html","id":"caution","dir":"Articles","previous_headings":"Example: inappropriate use of two-sample t-test","what":"6. Caution","title":"statlingua","text":"explanation generated Large Language Model. Critically review output consult additional statistical resources experts ensure correctness full understanding.","code":""},{"path":"/articles/statlingua.html","id":"example-polynomial-regression","dir":"Articles","previous_headings":"","what":"Example: polynomial regression","title":"statlingua","text":"following example fits quadradic linear model built-cars data set. ’s explanation linear regression model output provided.","code":"# Polynomial regression cars_lm <- lm(dist ~ poly(speed, degree = 2), data = cars) summary(cars_lm) #>  #> Call: #> lm(formula = dist ~ poly(speed, degree = 2), data = cars) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -28.720  -9.184  -3.188   4.628  45.152  #>  #> Coefficients: #>                          Estimate Std. Error t value Pr(>|t|)     #> (Intercept)                42.980      2.146  20.026  < 2e-16 *** #> poly(speed, degree = 2)1  145.552     15.176   9.591 1.21e-12 *** #> poly(speed, degree = 2)2   22.996     15.176   1.515    0.136     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 15.18 on 47 degrees of freedom #> Multiple R-squared:  0.6673, Adjusted R-squared:  0.6532  #> F-statistic: 47.14 on 2 and 47 DF,  p-value: 5.852e-12 context <- \" The data give the speed of cars (mph) and the distances taken to stop (ft). Note that the data were recorded in the 1920s. \" chat <- ellmer::chat_gemini(echo = \"none\") #> Using model = \"gemini-2.0-flash\". ex <- explain(cars_lm, chat = chat, context = context) cat(ex)"},{"path":"/articles/statlingua.html","id":"summary-of-the-statistical-model","dir":"Articles","previous_headings":"Example: polynomial regression","what":"1. Summary of the Statistical Model","title":"statlingua","text":"Statistical Model: linear regression model polynomial term degree 2 speed variable. sometimes called quadratic regression model. Purpose: Linear regression aims model relationship dependent variable (case, dist, stopping distance cars) one independent variables (, speed) fitting linear equation observed data. polynomial term allows non-linear, specifically quadratic, relationship speed stopping distance. Key Assumptions: Linearity: relationship independent variables (case, polynomial terms independent variable) mean dependent variable linear. Independence Errors: errors (residuals) independent . means error one observation predict error another observation. Homoscedasticity (Constant Variance Errors): variance errors constant across levels independent variables. Normality Errors: errors normally distributed. Independent variables measured without error: predictor variable, speed, measured accurately.","code":""},{"path":"/articles/statlingua.html","id":"appropriateness-of-the-statistical-model","dir":"Articles","previous_headings":"Example: polynomial regression","what":"2. Appropriateness of the Statistical Model","title":"statlingua","text":"Given context data recorded 1920s, using model relates car speed stopping distance reasonable. quadratic term included speed variable, suggests analyst believes relationship car speed stopping distance simple linear relationship. reasonable believe higher speeds, stopping distance may increase quickly lower speeds. words, analyst suspects rate change stopping distance speed increases constant. However, assumptions linear regression may hold. example, possible variance errors constant across levels speed. happen measurement error stopping distance larger higher speeds. addition, possible errors normally distributed. happen outliers data relationship speed stopping distance truly quadratic.","code":""},{"path":"/articles/statlingua.html","id":"suggestions-for-checking-assumptions-of-the-statistical-model","dir":"Articles","previous_headings":"Example: polynomial regression","what":"3. Suggestions for Checking Assumptions of the Statistical Model","title":"statlingua","text":"important check assumptions linear regression model ensure results valid. suggestions checking assumptions: Scatter plot dist vs. speed: Check relationship appears roughly linear accounting quadratic term. data shows clear curve even including quadratic term, model may appropriate. Plot residuals vs. fitted values: crucial plot. Look systematic patterns (e.g., curve) residuals. random scatter points indicates linearity assumption likely met. difficult assess without information data collected. data collected time, time series plot residuals reveal autocorrelation (dependence) errors. Durbin-Watson test can used formally test autocorrelation. Consider whether factors might cause stopping distance one car influence stopping distance another. cars measured independently, assumption may met. Plot residuals vs. fitted values: Look “funnel” shape, spread residuals increases decreases fitted values change. constant spread indicates homoscedasticity. Scale-Location Plot: plot (also known spread-level plot) another way visualize homogeneity variance. Look horizontal line equally spread points. Brown-Forsythe test: statistical test homogeneity variance. Use supplement graphical methods. Histogram residuals: Check distribution residuals approximately normal (bell-shaped). Quantile-Quantile (Q-Q) plot residuals: important plot assessing normality. residuals normally distributed, points fall approximately along straight diagonal line. Deviations line indicate departures normality. Shapiro-Wilk test: statistical test normality. Like tests, use conjunction Q-Q plot. Consider process used measure speed cars 1920s. measurement process accurate? reason believe variable may measured large degree error? , consider consequences error independent variable resulting statistical model.","code":""},{"path":"/articles/statlingua.html","id":"interpretation-of-the-output-1","dir":"Articles","previous_headings":"Example: polynomial regression","what":"4. Interpretation of the Output","title":"statlingua","text":"Call: lm(formula = dist ~ poly(speed, degree = 2), data = cars) simply restates model fit. says modeling dist function speed, speed variable included polynomial degree 2. Residuals: differences actual stopping distances (dist) stopping distances predicted model. summary (Min, 1Q, Median, 3Q, Max) gives idea distribution residuals. Ideally, median close zero, distribution roughly symmetric. min max values give range residuals. Coefficients: Estimate: estimated intercept 42.980. Since speed variable transformed using orthogonal polynomials, intercept represents expected value dist orthogonal polynomials equal zero. value particularly useful, necessary part statistical model. Std. Error: standard error intercept 2.146. measure uncertainty estimate intercept. t value: t-statistic intercept 20.026. estimate divided standard error, can used assess whether intercept statistically different zero. Pr(>|t|): p-value less 2e-16 (small number, essentially zero). means true intercept zero, probability observing t-statistic extreme 20.026 (either positive negative direction) virtually zero. Thus, strong evidence intercept zero. Estimate: estimated coefficient first-degree polynomial term speed 145.552. speed variable transformed using orthogonal polynomials, coefficient estimate direct interpretation. However, can conclude first-degree term important part model. Std. Error: standard error 15.176. t value: t-statistic 9.591. Pr(>|t|): p-value 1.21e-12 (, essentially zero). indicates strong evidence first-degree polynomial term significantly associated dist. poly(speed, degree = 2)2: Estimate = 22.996, Std. Error = 15.176, t value = 1.515, Pr(>|t|) = 0.136 Estimate: estimated coefficient second-degree polynomial term speed 22.996. speed variable transformed using orthogonal polynomials, coefficient estimate direct interpretation. Std. Error: standard error 15.176. t value: t-statistic 1.515. Pr(>|t|): p-value 0.136. suggests second-degree polynomial term statistically significantly associated dist conventional alpha = 0.05 level. Residual standard error: 15.18 47 degrees freedom estimate standard deviation errors (residuals). represents typical size difference observed values values predicted model. degrees freedom (47) calculated number observations (50) minus number parameters estimated model (3: intercept, first-degree polynomial, second-degree polynomial). Multiple R-squared: 0.6673, Adjusted R-squared: 0.6532 Multiple R-squared: represents proportion variance dist explained model. case, approximately 66.73% variance stopping distance explained quadratic relationship speed. Adjusted R-squared: modified version R-squared adjusts number predictors model. generally better measure goodness fit, especially comparing models different numbers predictors. , adjusted R-squared 0.6532. adjusted R-squared always less equal multiple R-squared. F-statistic: 47.14 2 47 DF, p-value: 5.852e-12 F-statistic tests overall significance model. null hypothesis coefficients model (except intercept) zero. small p-value (5.852e-12, essentially zero) indicates strong evidence null hypothesis. means least one polynomial terms speed significantly related dist. Since first-degree term statistically significant, result surprising.","code":""},{"path":"/articles/statlingua.html","id":"additional-considerations","dir":"Articles","previous_headings":"Example: polynomial regression","what":"5. Additional Considerations","title":"statlingua","text":"linear regression models, overdispersion typically concern. Overdispersion usually relevant count-based models, Poisson negative binomial regression. Since dependent variable measured continuous scale, zero inflation concern .","code":""},{"path":"/articles/statlingua.html","id":"caution-1","dir":"Articles","previous_headings":"Example: polynomial regression","what":"6. Caution","title":"statlingua","text":"explanation generated Large Language Model. tried provide accurate helpful interpretation, crucial critically review output consult additional statistical resources experts ensure correctness full understanding.","code":""},{"path":"/articles/statlingua.html","id":"example-poisson-regression","dir":"Articles","previous_headings":"","what":"Example: Poisson regression","title":"statlingua","text":"following example uses generic function explain() explain output fitted Poisson GLM using simple Markdown syntax: ’s explanation Poisson regression output provided.","code":"# Poisson regression example from ?stats::glm counts <- c(18,17,15,20,10,20,25,13,12) outcome <- gl(3,1,9) treatment <- gl(3,3) summary(D93_glm <- glm(counts ~ outcome + treatment, family = poisson())) #>  #> Call: #> glm(formula = counts ~ outcome + treatment, family = poisson()) #>  #> Deviance Residuals:  #>        1         2         3         4         5         6         7         8   #> -0.67125   0.96272  -0.16965  -0.21999  -0.95552   1.04939   0.84715  -0.09167   #>        9   #> -0.96656   #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  3.045e+00  1.709e-01  17.815   <2e-16 *** #> outcome2    -4.543e-01  2.022e-01  -2.247   0.0246 *   #> outcome3    -2.930e-01  1.927e-01  -1.520   0.1285     #> treatment2  -3.242e-16  2.000e-01   0.000   1.0000     #> treatment3  -2.148e-16  2.000e-01   0.000   1.0000     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for poisson family taken to be 1) #>  #>     Null deviance: 10.5814  on 8  degrees of freedom #> Residual deviance:  5.1291  on 4  degrees of freedom #> AIC: 56.761 #>  #> Number of Fisher Scoring iterations: 4 chat <- ellmer::chat_gemini(echo = \"none\") #> Using model = \"gemini-2.0-flash\". ex <- explain(D93_glm, chat = chat)  cat(ex)"},{"path":"/articles/statlingua.html","id":"summary-of-the-statistical-model-1","dir":"Articles","previous_headings":"Example: Poisson regression","what":"1. Summary of the Statistical Model","title":"statlingua","text":"Name: Poisson Regression log link function. Purpose: Poisson regression used model count data. Specifically, models rate events occur. log link function ensures predicted counts always positive modeling logarithm expected count linear function predictors. response variable (counts) follows Poisson distribution. means variance equal mean. observations independent . logarithm expected count linearly related predictors. overdispersion (variance greater mean) underdispersion (variance less mean).","code":""},{"path":"/articles/statlingua.html","id":"appropriateness-of-the-statistical-model-1","dir":"Articles","previous_headings":"Example: Poisson regression","what":"2. Appropriateness of the Statistical Model","title":"statlingua","text":"Without additional context data, study design, research question, comment whether chosen statistical model appropriate. assess appropriateness Poisson model, need consider whether outcome variable count, whether assumptions Poisson distribution likely met.","code":""},{"path":"/articles/statlingua.html","id":"suggestions-for-checking-assumptions-of-the-statistical-model-1","dir":"Articles","previous_headings":"Example: Poisson regression","what":"3. Suggestions for Checking Assumptions of the Statistical Model","title":"statlingua","text":"’s essential check assumptions Poisson regression model. ’s : Independence: usually determined study design. observations collected independently? Linearity: can’t directly check linearity relationship predictors counts model assumes linear relationship predictors log counts. assess plotting residuals predicted values predictor. Look patterns residuals, indicate violation linearity. Residual Plots: Create plot residuals versus fitted values. well-fitting Poisson model, residuals randomly scattered around zero, apparent patterns trends. Funneling non-random patterns suggest problem. Quantile-Quantile (QQ) Plot: Create QQ plot residuals theoretical normal distribution. Variance vs. Mean: Compare variance mean outcome variable (counts). Poisson distribution, approximately equal. variance much larger mean, overdispersion concern. Overdispersion test: useful rule thumb divide residual deviance residual degrees freedom. case, 5.1291 / 4 = 1.282. value much larger 1 suggests overdispersion, may problem. However, rule thumb, number excessively large. formal statistical tests overdispersion exist, graphical methods generally informative understanding nature violations.","code":""},{"path":"/articles/statlingua.html","id":"interpretation-of-the-output-2","dir":"Articles","previous_headings":"Example: Poisson regression","what":"4. Interpretation of the Output","title":"statlingua","text":"’s interpretation output provided: Call: glm(formula = counts ~ outcome + treatment, family = poisson()) confirms used glm function R fit generalized linear model. formula indicates modeling counts function outcome treatment, using Poisson distribution. Deviance Residuals: Deviance residuals measure well data point fits model. Large positive negative values indicate poor fit particular observations. Since 9 data points, hard assess , values seem reasonable. Coefficients: estimated log expected count outcome treatment baseline levels (.e., outcome1 treatment1 since outcome treatment categorical variables). words, outcome outcome1 treatment treatment1, estimated log count 3.045. Exponentiating value (exp(3.045) ≈ 21.00) gives estimated expected count (21.00) outcome treatment baseline levels. estimated change log expected count outcome outcome2, holding treatment constant. Since outcome coefficient negative, means expected count outcome2 lower outcome1. get count, exponentiate: exp(-0.4543) = 0.635. Thus, treatment level, expected count 0.635 times lower outcome2 compared outcome1. estimated change log expected count outcome outcome3, holding treatment constant. Since outcome coefficient negative, means expected count outcome3 lower outcome1. get count, exponentiate: exp(-0.2930) = 0.746. Thus, treatment level, expected count 0.746 times lower outcome3 compared outcome1. estimated change log expected count treatment treatment2, holding outcome constant. Since treatment coefficient negative, means expected count treatment2 lower treatment1. Note effectively zero. estimated change log expected count treatment treatment3, holding outcome constant. Since treatment coefficient negative, means expected count treatment3 lower treatment1. Note effectively zero. Std. Error: standard error measures precision estimated coefficients. Smaller standard errors indicate precise estimates. z value: test statistic (z-score) null hypothesis coefficient equal zero. calculated dividing coefficient estimate standard error. outcome2, p-value 0.0246, statistically significant 0.05 level. suggests evidence outcome2 associated change expected count, compared outcome1 (baseline). outcome3, p-value 0.1285, statistically significant 0.05 level. suggests enough evidence conclude outcome3 associated change expected count, compared outcome1 (baseline). treatment2 treatment3, p-values 1.0000, statistically significant 0.05 level. suggests enough evidence conclude treatment2 treatment3 associated change expected count, compared treatment1 (baseline). (Dispersion parameter poisson family taken 1): confirms model assuming variance equals mean, standard Poisson regression. substantial overdispersion, dispersion parameter estimated larger 1 quasi-Poisson model, standard errors coefficients inflated. Null deviance: 10.5814 8 degrees freedom measures deviance “null model” (model intercept) observed data. indicates well null model fits data. Residual deviance: 5.1291 4 degrees freedom measures deviance fitted model observed data. indicates well model predictors fits data. lower residual deviance indicates better fit. AIC: 56.761 AIC (Akaike Information Criterion) measure model fit penalizes model complexity. Lower AIC values indicate better balance fit parsimony. useful comparing different models. Number Fisher Scoring iterations: 4 indicates number iterations fitting algorithm took converge maximum likelihood estimates.","code":""},{"path":"/articles/statlingua.html","id":"additional-considerations-for-this-type-of-model","dir":"Articles","previous_headings":"Example: Poisson regression","what":"5. Additional considerations for this type of model:","title":"statlingua","text":"Overdispersion: mentioned earlier, overdispersion common issue Poisson regression. Check using methods described . overdispersion present, consider using quasi-Poisson model negative binomial regression model, can account extra variability. rule--thumb overdispersion check part 3 suggests overdispersion major concern . Zero Inflation: excess zeros count data compared Poisson distribution predict, might zero inflation. can investigate comparing observed proportion zeros proportion predicted Poisson model. Zero-inflated Poisson (ZIP) models available handle situation.","code":""},{"path":"/articles/statlingua.html","id":"caution-2","dir":"Articles","previous_headings":"Example: Poisson regression","what":"6. Caution","title":"statlingua","text":"explanation generated Large Language Model. Critically review output consult additional statistical resources experts ensure correctness full understanding.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brandon M. Greenwell. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Greenwell BM (2025). statlingua: Explain Statistical Output Large Language Models. https://github.com/bgreenwell/statlingua, https://bgreenwell.github.io/statlingua/.","code":"@Manual{,   title = {statlingua: Explain Statistical Output with Large Language Models},   author = {Brandon M. Greenwell},   year = {2025},   note = {https://github.com/bgreenwell/statlingua, https://bgreenwell.github.io/statlingua/}, }"},{"path":"/index.html","id":"statlingua","dir":"","previous_headings":"","what":"Explain Statistical Output with Large Language Models","title":"Explain Statistical Output with Large Language Models","text":"WARNING: package work progess! Use caution. statlingua R package leveraging large language models help convert complex statistical output straightforward, understandable, context-aware natural language descriptions. feeding statistical models outcomes tool, can effortlessly produce human-readable interpretations coefficients, p-values, measures model fit, key metrics, thereby democratizing statistical understanding individuals varying levels technical expertise.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Explain Statistical Output with Large Language Models","text":"statlingua package currently available CRAN, can install development version GitHub.","code":"# Install the latest development version from GitHub: if (!requireNamespace(\"remotes\")) {   install.packages(\"remotes\") } remotes::install_github(\"bgreenwell/statlingua\")"},{"path":"/reference/explain.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain statistical output — explain","title":"Explain statistical output — explain","text":"Use LLM explain output various statistical objects using straightforward, understandable, context-aware natural language descriptions.","code":""},{"path":"/reference/explain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain statistical output — explain","text":"","code":"explain(object, chat, ...)  # S3 method for class 'htest' explain(object, chat, context = NULL, echo = NULL, verbose = FALSE, ...)  # S3 method for class 'lm' explain(object, chat, context = NULL, echo = NULL, verbose = FALSE, ...)  # S3 method for class 'glm' explain(object, chat, context = NULL, echo = NULL, verbose = FALSE, ...)"},{"path":"/reference/explain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain statistical output — explain","text":"object appropriate statistical object. example, object can output calling t.test() glm(). chat Chat object (e.g., calling chat_openai() [chat_gemini()][ellmer::chat_gemini)]). [ellmer::chat_gemini)]: R:ellmer::chat_gemini) ... Additional optional arguments. (Currently ignored.) context Optional character string providing additional context, background experiment information data. echo Logical specifying whether emit response stdout received. NULL (default), value echo set chat object created used. See $chat() method described Chat. verbose Logical indicating whether print system  prompt chatbot input, can useful debugging. Default FALSE. level confidence level used interpret output. Default 0.95.","code":""},{"path":"/reference/explain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain statistical output — explain","text":"","code":"if (FALSE) { # \\dontrun{ # Polynomial regression cars_lm <- lm(dist ~ poly(speed, degree = 2), data = cars) context <- \" The data give the speed of cars (mph) and the distances taken to stop (ft). Note that the data were recorded in the 1920s. \" # Use Google Gemini to explain the output; requires an API key; see # ?ellmer::chat_gemini for details chat <- ellmer::chat_gemini() explain(cars_lm, chat = chat, context = context)  # Poisson regression example from ?stats::glm counts <- c(18,17,15,20,10,20,25,13,12) outcome <- gl(3,1,9) treatment <- gl(3,3) data.frame(treatment, outcome, counts) # showing data D93_glm <- glm(counts ~ outcome + treatment, family = poisson())  # Use Google Gemini to explain the output; requires an API key; see # ?ellmer::chat_gemini for details chat <- ellmer::chat_gemini() explain(D93_glm, chat = chat, verbose = TRUE) } # }"},{"path":"/news/index.html","id":"statlingua-010","dir":"Changelog","previous_headings":"","what":"statlingua 0.1.0","title":"statlingua 0.1.0","text":"explain() generic gained methods \"htest\" \"glm\" objects.","code":""}]
